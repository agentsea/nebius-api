// @generated
// This file is @generated by prost-build.
/// Common resource metadata.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceMetadata {
    /// Identifier for the resource, unique for its resource type.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Identifier of the parent resource to which the resource belongs.
    #[prost(string, tag="2")]
    pub parent_id: ::prost::alloc::string::String,
    /// Human readable name for the resource.
    #[prost(string, tag="3")]
    pub name: ::prost::alloc::string::String,
    /// Version of the resource for safe concurrent modifications and consistent reads.
    /// Positive and monotonically increases on each resource spec change (but *not* on each change of the
    /// resource's container(s) or status).
    /// Service allows zero value or current.
    ///
    #[prost(int64, tag="4")]
    pub resource_version: i64,
    /// Timestamp indicating when the resource was created.
    #[prost(message, optional, tag="5")]
    pub created_at: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Timestamp indicating when the resource was last updated.
    #[prost(message, optional, tag="6")]
    pub updated_at: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Labels associated with the resource.
    ///
    #[prost(map="string, string", tag="7")]
    pub labels: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// if service supports uniqueness of ResourceMetadata.name within tuple (scope) <resource_type, parent_id>
/// it also must have grpc method GetByName
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetByNameRequest {
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Operation {
    /// ID of the operation.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Human-readable description of the operation. 0-256 characters long.
    #[prost(string, tag="2")]
    pub description: ::prost::alloc::string::String,
    /// Creation timestamp.
    #[prost(message, optional, tag="3")]
    pub created_at: ::core::option::Option<::pbjson_types::Timestamp>,
    /// ID of the user or service account who initiated the operation.
    #[prost(string, tag="4")]
    pub created_by: ::prost::alloc::string::String,
    /// The time when the operation has finished.
    #[prost(message, optional, tag="5")]
    pub finished_at: ::core::option::Option<::pbjson_types::Timestamp>,
    /// The request that generated this operation.
    #[prost(message, optional, tag="6")]
    pub request: ::core::option::Option<::pbjson_types::Any>,
    /// The request headers that are essential for the request that generated the operation.
    /// For instance, `x-resetmask`. Without these headers the request might have been processed
    /// differently if repeated.
    /// All the header names *must* be converted to lower case.
    /// Validator is based on:
    /// <https://httpwg.org/specs/rfc9110.html#considerations.for.new.field.names>
    #[prost(map="string, message", tag="11")]
    pub request_headers: ::std::collections::HashMap<::prost::alloc::string::String, operation::RequestHeader>,
    /// ID of the resource that this operation creates, updates, deletes or otherwise changes.
    ///
    /// If the operation affects multiple resources or does not affect any API resources at all
    /// (e.g. a routine maintenance operation visible to the user), the \[resource_id\] must be empty.
    #[prost(string, tag="7")]
    pub resource_id: ::prost::alloc::string::String,
    /// Additional information about the progress of an operation, e.g., a progress percentage.
    /// MAY be absent while the operation is running, MUST be absent after the operation has completed.
    ///
    /// Format of message inside \[progress_data\] is service-dependent and MUST be documented by the
    /// service, IF it is used.
    #[prost(message, optional, tag="9")]
    pub progress_data: ::core::option::Option<::pbjson_types::Any>,
    /// The status of this operation. Set when this operation is completed.
    /// See <https://github.com/grpc/grpc/blob/master/src/proto/grpc/status/status.proto.>
    ///
    /// \[status.code\] is <https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto:>
    /// - If \[status.code\] == OK, the operation has completed successfully.
    /// - If \[status.code\] != OK, the operation has failed or has been cancelled.
    ///    - \[status.message\] will contain a user-readable and actionable error message.
    ///    - \[status.details\] will contain additional diagnostic information in the form of
    ///      \[ServiceError\] from nebius/common/v1/error.proto
    /// - \[status.code\] must belong to an Operation-compatible subset of GRPC codes:
    ///    OK, CANCELLED, PERMISSION_DENIED, RESOURCE_EXHAUSTED, FAILED_PRECONDITION, ABORTED, INTERNAL
    #[prost(message, optional, tag="10")]
    pub status: ::core::option::Option<super::super::super::google::rpc::Status>,
}
/// Nested message and enum types in `Operation`.
pub mod operation {
    /// Request header is a container for all the values of a particular header of a request
    /// as there is no such thing as map<string, repeated string>
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RequestHeader {
        /// The values of a particular header from a request
        #[prost(string, repeated, tag="1")]
        pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceError {
    /// ID of Service which the error originated in. E.g. "dns".
    #[prost(string, tag="1")]
    pub service: ::prost::alloc::string::String,
    /// Detailed error code, service-specific. E.g. "DnsZoneNotEmpty".
    /// Name of the exception, without Exception suffix if not set.
    /// Example: for PermissionDeniedException -> code == PermissionDenied.
    #[prost(string, tag="2")]
    pub code: ::prost::alloc::string::String,
    /// Retry type tells how to provide retry, e.g.: just a single call or the whole logic before it.
    #[prost(enumeration="service_error::RetryType", tag="30")]
    pub retry_type: i32,
    /// Additional message describing the error, if any.
    #[prost(oneof="service_error::Details", tags="100, 110, 111, 112, 113, 120, 130, 131, 140, 141, 142, 999")]
    pub details: ::core::option::Option<service_error::Details>,
}
/// Nested message and enum types in `ServiceError`.
pub mod service_error {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum RetryType {
        Unspecified = 0,
        /// Just retry the failed call.
        Call = 1,
        /// Retry whole logic before call and make a new one.
        UnitOfWork = 2,
        /// Do not retry, this is a fatal error.
        Nothing = 3,
    }
    impl RetryType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                RetryType::Unspecified => "UNSPECIFIED",
                RetryType::Call => "CALL",
                RetryType::UnitOfWork => "UNIT_OF_WORK",
                RetryType::Nothing => "NOTHING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "CALL" => Some(Self::Call),
                "UNIT_OF_WORK" => Some(Self::UnitOfWork),
                "NOTHING" => Some(Self::Nothing),
                _ => None,
            }
        }
    }
    /// Additional message describing the error, if any.
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Details {
        #[prost(message, tag="100")]
        BadRequest(super::BadRequest),
        #[prost(message, tag="110")]
        BadResourceState(super::BadResourceState),
        #[prost(message, tag="111")]
        ResourceNotFound(super::ResourceNotFound),
        #[prost(message, tag="112")]
        ResourceAlreadyExists(super::ResourceAlreadyExists),
        #[prost(message, tag="113")]
        OutOfRange(super::OutOfRange),
        #[prost(message, tag="120")]
        PermissionDenied(super::PermissionDenied),
        #[prost(message, tag="130")]
        ResourceConflict(super::ResourceConflict),
        #[prost(message, tag="131")]
        OperationAborted(super::OperationAborted),
        #[prost(message, tag="140")]
        TooManyRequests(super::TooManyRequests),
        #[prost(message, tag="141")]
        QuotaFailure(super::QuotaFailure),
        #[prost(message, tag="142")]
        NotEnoughResources(super::NotEnoughResources),
        #[prost(message, tag="999")]
        InternalError(super::InternalError),
    }
}
/// The request is invalid.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BadRequest {
    /// Describes all violations.
    #[prost(message, repeated, tag="1")]
    pub violations: ::prost::alloc::vec::Vec<bad_request::Violation>,
}
/// Nested message and enum types in `BadRequest`.
pub mod bad_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Violation {
        /// What field value is invalid.
        #[prost(string, tag="1")]
        pub field: ::prost::alloc::string::String,
        /// Description why the value is invalid, in English.
        #[prost(string, tag="2")]
        pub message: ::prost::alloc::string::String,
    }
}
/// The resource we are trying to use, create, change or delete is in a bad state and cannot be used.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BadResourceState {
    /// ID of the resource which is bad.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
    /// The reason why this state is bad and cannot be used.
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
}
/// Resource we are trying to interact with does not exist.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceNotFound {
    /// ID of the requested resource.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
}
/// Resource we are trying to create already exists.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceAlreadyExists {
    /// ID of the existing resource.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
}
/// There is a difference between the actual resource state and the expected one.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceConflict {
    /// ID of conflicting resource.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
    /// Detailed info about conflict.
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
}
/// Operation on the resource has been aborted by a subsequent operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationAborted {
    /// ID of the aborted operation.
    #[prost(string, tag="1")]
    pub operation_id: ::prost::alloc::string::String,
    /// ID of the subsequent operation.
    #[prost(string, tag="2")]
    pub aborted_by_operation_id: ::prost::alloc::string::String,
    /// Resource ID corresponding to both of the operations.
    #[prost(string, tag="3")]
    pub resource_id: ::prost::alloc::string::String,
}
/// Indicates that element with requested parameters is exceeding the particular range.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OutOfRange {
    /// Requested value.
    #[prost(string, tag="1")]
    pub requested: ::prost::alloc::string::String,
    /// Available limit.
    #[prost(string, tag="2")]
    pub limit: ::prost::alloc::string::String,
}
/// Indicates that the action cannot be performed because there are insufficient access rights to a resource.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PermissionDenied {
    /// ID of the resource that cannot be accessed.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
}
/// Generic internal error.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InternalError {
    /// Error request ID.
    #[prost(string, tag="1")]
    pub request_id: ::prost::alloc::string::String,
    /// Trace ID for the failing request.
    #[prost(string, tag="2")]
    pub trace_id: ::prost::alloc::string::String,
}
/// You initiated too many requests to the service at once. Enhance your calm.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TooManyRequests {
    /// What request limit is exceeded (service-dependent).
    #[prost(string, tag="1")]
    pub violation: ::prost::alloc::string::String,
}
/// Indicates a failure due to exceeding specified limits or allocations in a system or service.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaFailure {
    /// Describes all quota violations.
    #[prost(message, repeated, tag="1")]
    pub violations: ::prost::alloc::vec::Vec<quota_failure::Violation>,
}
/// Nested message and enum types in `QuotaFailure`.
pub mod quota_failure {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Violation {
        /// Which quota check failed.
        #[prost(string, tag="1")]
        pub quota: ::prost::alloc::string::String,
        /// A description of how the quota check failed.
        #[prost(string, tag="2")]
        pub message: ::prost::alloc::string::String,
        /// Maximum permissible value.
        #[prost(string, tag="3")]
        pub limit: ::prost::alloc::string::String,
        /// Requested value.
        #[prost(string, tag="4")]
        pub requested: ::prost::alloc::string::String,
    }
}
/// Indicates that there are not enough resources available to perform the requested action.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotEnoughResources {
    /// Describes all resource violations.
    #[prost(message, repeated, tag="1")]
    pub violations: ::prost::alloc::vec::Vec<not_enough_resources::Violation>,
}
/// Nested message and enum types in `NotEnoughResources`.
pub mod not_enough_resources {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Violation {
        /// The type of resource that is insufficient.
        /// This field is populated when it is possible to determine the lacking resource type.
        /// **Not for programmatic use.**
        #[prost(string, tag="1")]
        pub resource_type: ::prost::alloc::string::String,
        /// A description of how the resource is insufficient.
        #[prost(string, tag="2")]
        pub message: ::prost::alloc::string::String,
        /// Requested value.
        #[prost(string, tag="3")]
        pub requested: ::prost::alloc::string::String,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOperationRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListOperationsRequest {
    /// ID of the Resource to list operations for.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
    /// Page size. \[1...1000\]. Optional, if not specified, a reasonable default will be chosen by the service.
    #[prost(int64, tag="2")]
    pub page_size: i64,
    /// Listing continuation token. Empty to start listing from the first page.
    #[prost(string, tag="3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListOperationsResponse {
    #[prost(message, repeated, tag="1")]
    pub operations: ::prost::alloc::vec::Vec<Operation>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
include!("nebius.common.v1.serde.rs");
include!("nebius.common.v1.tonic.rs");
// @@protoc_insertion_point(module)