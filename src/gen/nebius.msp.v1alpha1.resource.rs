// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Template {
    #[prost(message, optional, tag="1")]
    pub status: ::core::option::Option<TemplateStatus>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<TemplateSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TemplateStatus {
    #[prost(message, optional, tag="1")]
    pub preset_details: ::core::option::Option<PresetDetails>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TemplateSpec {
    #[prost(message, optional, tag="1")]
    pub resources: ::core::option::Option<ResourcesSpec>,
    #[prost(message, optional, tag="2")]
    pub hosts: ::core::option::Option<Host>,
    #[prost(message, optional, tag="3")]
    pub disk: ::core::option::Option<Disk>,
    #[prost(string, tag="4")]
    pub role: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourcesSpec {
    #[prost(string, tag="1")]
    pub platform: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub preset: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PresetDetails {
    #[prost(int32, tag="1")]
    pub cpu_count: i32,
    #[prost(int64, tag="2")]
    pub memory_gibibytes: i64,
    #[prost(int32, tag="3")]
    pub gpu_count: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Range {
    #[prost(int64, tag="1")]
    pub min: i64,
    #[prost(int64, tag="2")]
    pub max: i64,
    /// step 0 is no step validation
    #[prost(int64, tag="3")]
    pub step: i64,
    #[prost(int64, tag="4")]
    pub value: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Disk {
    #[prost(string, tag="1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub size_gibibytes: ::core::option::Option<Range>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiskSpec {
    #[prost(string, tag="1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(int64, tag="2")]
    pub size_gibibytes: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Host {
    #[prost(message, optional, tag="1")]
    pub count: ::core::option::Option<Range>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HostSpec {
    #[prost(int64, tag="1")]
    pub count: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Preset {
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<PresetSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PresetSpec {
    #[prost(message, optional, tag="1")]
    pub flavor: ::core::option::Option<FlavorSpec>,
    #[prost(message, optional, tag="2")]
    pub hosts: ::core::option::Option<Host>,
    #[prost(message, optional, tag="3")]
    pub disk: ::core::option::Option<Disk>,
    #[prost(string, tag="4")]
    pub role: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FlavorSpec {
    #[prost(message, optional, tag="1")]
    pub cpu: ::core::option::Option<CpuSpec>,
    #[prost(message, optional, tag="2")]
    pub memory: ::core::option::Option<MemorySpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CpuSpec {
    #[prost(int32, tag="1")]
    pub count: i32,
    #[prost(int32, tag="2")]
    pub generation: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MemorySpec {
    #[prost(int64, tag="1")]
    pub limit_gibibytes: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPresetsRequest {
    #[prost(int64, tag="1")]
    pub page_size: i64,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub parent_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPresetsResponse {
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<Preset>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTemplatesRequest {
    #[prost(int64, tag="1")]
    pub page_size: i64,
    #[prost(string, tag="2")]
    pub page_token: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub parent_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTemplatesResponse {
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<Template>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
include!("nebius.msp.v1alpha1.resource.serde.rs");
include!("nebius.msp.v1alpha1.resource.tonic.rs");
// @@protoc_insertion_point(module)