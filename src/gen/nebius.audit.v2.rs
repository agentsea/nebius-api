// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessToken {
    /// Token without signature.
    #[prost(string, tag="2")]
    pub masked_token: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AuthenticationType {
    Unspecified = 0,
    AccessToken = 1,
    StaticKey = 2,
}
impl AuthenticationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AuthenticationType::Unspecified => "AUTHENTICATION_TYPE_UNSPECIFIED",
            AuthenticationType::AccessToken => "ACCESS_TOKEN",
            AuthenticationType::StaticKey => "STATIC_KEY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTHENTICATION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ACCESS_TOKEN" => Some(Self::AccessToken),
            "STATIC_KEY" => Some(Self::StaticKey),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Federation {
    /// Unique identifier of the federation.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Human-readable name of the federation.
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StaticKey {
    /// Unique identifier of static key.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Subject {
    /// Username of the subject.
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(oneof="subject::Id", tags="10, 11")]
    pub id: ::core::option::Option<subject::Id>,
}
/// Nested message and enum types in `Subject`.
pub mod subject {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Id {
        /// This field is filled in if the call was made on behalf of a service account.
        #[prost(string, tag="10")]
        ServiceAccountId(::prost::alloc::string::String),
        /// This field is filled in if the call was made on behalf of a user.
        #[prost(string, tag="11")]
        TenantUserId(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Authentication {
    /// Answers the question whether or not the subject has been successfully authenticated.
    #[prost(bool, tag="1")]
    pub authenticated: bool,
    /// Contains information about the subject of the call.
    #[prost(message, optional, tag="2")]
    pub subject: ::core::option::Option<Subject>,
    /// Information on the federation within which the subject exists.
    #[prost(message, optional, tag="3")]
    pub federation: ::core::option::Option<Federation>,
    /// Describes the type of authentication.
    #[prost(enumeration="AuthenticationType", tag="4")]
    pub authentication_type: i32,
    #[prost(oneof="authentication::Credential", tags="10, 11")]
    pub credential: ::core::option::Option<authentication::Credential>,
}
/// Nested message and enum types in `Authentication`.
pub mod authentication {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Credential {
        /// Information about token.
        #[prost(message, tag="10")]
        TokenCredential(super::AccessToken),
        /// Information about static key.
        #[prost(message, tag="11")]
        StaticKeyCredential(super::StaticKey),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Authorization {
    /// Field is required. We do not use «(buf.validate.field).required = true» here as false value considered as unset (validation violation)
    #[prost(bool, tag="1")]
    pub authorized: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    /// Unique identifier of the request.
    #[prost(string, tag="3")]
    pub request_id: ::prost::alloc::string::String,
    /// Unique key that the server uses to recognize subsequent retries of the same request.
    #[prost(string, tag="5")]
    pub idempotency_id: ::prost::alloc::string::String,
    /// A unique identifier that allows you to link calls to different services within an operation.
    #[prost(string, tag="6")]
    pub trace_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceMetadata {
    /// Unique identifier of the resource.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Name of the resource.
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    /// Type of the resource.
    #[prost(string, tag="3")]
    pub r#type: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceState {
    /// The state of the resource before the change in the call.
    #[prost(message, optional, tag="1")]
    pub previous: ::core::option::Option<::pbjson_types::Struct>,
    /// The state of the resource after the change in the call.
    #[prost(message, optional, tag="2")]
    pub current: ::core::option::Option<::pbjson_types::Struct>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Resource {
    /// Provides basic information about the resource.
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<ResourceMetadata>,
    /// Gives an understanding of how the resource was changed in the call.
    #[prost(message, optional, tag="2")]
    pub state: ::core::option::Option<ResourceState>,
    /// Top-down resources hierarchy from tenant to resource.
    #[prost(message, repeated, tag="3")]
    pub hierarchy: ::prost::alloc::vec::Vec<ResourceMetadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    /// The status that the server returned to the client.
    #[prost(enumeration="super::super::super::google::rpc::Code", tag="1")]
    pub status_code: i32,
    /// Error message if the call was not successful.
    #[prost(string, tag="2")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Service {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    ResponseStatusUnspecified = 0,
    /// Asynchronous action started
    Started = 1,
    /// Action finished successfully
    Done = 2,
    /// Action finished with error
    Error = 3,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Status::ResponseStatusUnspecified => "RESPONSE_STATUS_UNSPECIFIED",
            Status::Started => "STARTED",
            Status::Done => "DONE",
            Status::Error => "ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RESPONSE_STATUS_UNSPECIFIED" => Some(Self::ResponseStatusUnspecified),
            "STARTED" => Some(Self::Started),
            "DONE" => Some(Self::Done),
            "ERROR" => Some(Self::Error),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuditEvent {
    /// Unique event id.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Identifies the context in which an event happened. Presented in the form of URI.
    #[prost(string, tag="2")]
    pub source: ::prost::alloc::string::String,
    /// Version of CloudEvents spec. See <https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#specversion>
    #[prost(string, tag="3")]
    pub spec_version: ::prost::alloc::string::String,
    /// The type of event related to the originating occurrence. Formed according to template: "ai.nebius.<serviceName>.<resourceType>.<action>"
    #[prost(string, tag="4")]
    pub r#type: ::prost::alloc::string::String,
    /// Indicates the service that generated the event.
    #[prost(message, optional, tag="5")]
    pub service: ::core::option::Option<Service>,
    /// Indicates an action taken on the resource.
    #[prost(string, tag="6")]
    pub action: ::prost::alloc::string::String,
    /// Timestamp of when the occurrence happened.
    #[prost(message, optional, tag="7")]
    pub time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Audit event version, in "X.Y" format, events within different Y's are backwards compatible, events with different X's are not.
    #[prost(string, tag="8")]
    pub event_version: ::prost::alloc::string::String,
    /// Represents the subject of an API call.
    #[prost(message, optional, tag="9")]
    pub authentication: ::core::option::Option<Authentication>,
    /// Represents permissions that have been verified for the subject as part of the API call.
    #[prost(message, optional, tag="10")]
    pub authorization: ::core::option::Option<Authorization>,
    /// A resource that was read or modified as part of the operation. Can be empty if no resource accessed or changed.
    #[prost(message, optional, tag="11")]
    pub resource: ::core::option::Option<Resource>,
    /// Contains information about the request from the customer.
    #[prost(message, optional, tag="12")]
    pub request: ::core::option::Option<Request>,
    /// Contains information about the response from the server.
    #[prost(message, optional, tag="13")]
    pub response: ::core::option::Option<Response>,
    /// The async operation status
    #[prost(enumeration="Status", tag="16")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAuditEventRequest {
    /// A tenant id must be provided
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    #[prost(int64, tag="2")]
    pub page_size: i64,
    #[prost(message, optional, tag="3")]
    pub start: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag="4")]
    pub end: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, tag="5")]
    pub page_token: ::prost::alloc::string::String,
    /// Example:
    /// service.name = 'iam' AND resource.hierarchy.id:'container-e0t' AND regex(resource.metadata.name, '^.*test.*$')
    ///
    /// Supported filters:
    /// "=" - equals
    /// "!=" - not equals
    /// ":" - contains
    /// regex - regular expression
    ///
    /// Fields that can be used for filtering:
    /// action
    /// authentication.static_key_credential.id
    /// authentication.subject.name
    /// authentication.subject.service_account_id
    /// authentication.subject.tenant_user_id
    /// authentication.token_credential.masked_token
    /// resource.hierarchy.id
    /// resource.hierarchy.name
    /// resource.metadata.id
    /// resource.metadata.name
    /// resource.metadata.type
    /// service.name
    /// type
    #[prost(string, tag="6")]
    pub filter: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAuditEventResponse {
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<AuditEvent>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
include!("nebius.audit.v2.serde.rs");
include!("nebius.audit.v2.tonic.rs");
// @@protoc_insertion_point(module)