// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cluster {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<ClusterSpec>,
    #[prost(message, optional, tag="3")]
    pub status: ::core::option::Option<MlflowClusterStatus>,
}
/// Cluster specification
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterSpec {
    /// Description of the cluster.
    #[prost(string, tag="1")]
    pub description: ::prost::alloc::string::String,
    /// Either make cluster public accessible or accessible only via private VPC.
    #[prost(bool, tag="2")]
    pub public_access: bool,
    /// MLflow admin username.
    #[prost(string, tag="4")]
    pub admin_username: ::prost::alloc::string::String,
    /// MLflow admin password.
    #[prost(string, tag="5")]
    pub admin_password: ::prost::alloc::string::String,
    /// Id of the service account that will be used to access S3 bucket (and create one if not provided).
    #[prost(string, tag="6")]
    pub service_account_id: ::prost::alloc::string::String,
    /// Name of the Nebius S3 bucket for MLflow artifacts. If not provided, will be created under the same parent.
    #[prost(string, tag="7")]
    pub storage_bucket_name: ::prost::alloc::string::String,
    /// ID of the vpc network.
    #[prost(string, tag="8")]
    pub network_id: ::prost::alloc::string::String,
    /// Size defines how much resources will be allocated to mlflow
    /// See supported sizes in the documentation. Default size is the smallest available in the region.
    #[prost(string, tag="9")]
    pub size: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MlflowClusterStatus {
    /// Current phase of the cluster.
    #[prost(enumeration="super::super::v1alpha1::cluster_status::Phase", tag="1")]
    pub phase: i32,
    /// State reflects substatus of the phase to define whether it's healthy or not.
    #[prost(enumeration="super::super::v1alpha1::cluster_status::State", tag="2")]
    pub state: i32,
    /// Tracking endpoint url.
    /// Will be removed soon in favor of private_tracking_endpoint and public_tracking_endpoint.
    #[prost(string, tag="3")]
    pub tracking_endpoint: ::prost::alloc::string::String,
    /// Name of the Nebius S3 bucket for MLflow artifacts.
    #[prost(string, tag="4")]
    pub effective_storage_bucket_name: ::prost::alloc::string::String,
    /// Count of experiments in the MLflow cluster
    #[prost(uint32, tag="5")]
    pub experiments_count: u32,
    /// MLflow version
    #[prost(string, tag="6")]
    pub mlflow_version: ::prost::alloc::string::String,
    /// Public and private tracking endpoints
    #[prost(message, optional, tag="7")]
    pub tracking_endpoints: ::core::option::Option<Endpoints>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Endpoints {
    /// Private endpoint
    #[prost(string, tag="1")]
    pub private: ::prost::alloc::string::String,
    /// Public endpoint
    #[prost(string, tag="2")]
    pub public: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClusterRequest {
    /// ID of the cluster to retrieve.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClusterByNameRequest {
    /// Identifier of IAM container to get cluster from.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    /// Name of the cluster.
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListClustersRequest {
    /// Identifier of IAM container to list clusters from.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    /// Specifies the maximum number of items to return in the response. Default value is 100.
    #[prost(int64, tag="2")]
    pub page_size: i64,
    /// Token for pagination, allowing the retrieval of the next set of results.
    #[prost(string, tag="3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListClustersResponse {
    /// List of clusters.
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<Cluster>,
    /// Token for pagination, indicating the next set of results can be retrieved using this token.
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateClusterRequest {
    /// Metadata associated with the new cluster. Must include parent_id in which we create the cluster.
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::super::common::v1::ResourceMetadata>,
    /// Specification for the new cluster.
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<ClusterSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteClusterRequest {
    /// ID of the cluster to delete.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
include!("nebius.msp.mlflow.v1alpha1.serde.rs");
include!("nebius.msp.mlflow.v1alpha1.tonic.rs");
// @@protoc_insertion_point(module)