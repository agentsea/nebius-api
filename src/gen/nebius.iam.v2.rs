// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessKey {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<AccessKeySpec>,
    #[prost(message, optional, tag="3")]
    pub status: ::core::option::Option<AccessKeyStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessKeySpec {
    #[prost(message, optional, tag="1")]
    pub account: ::core::option::Option<super::v1::Account>,
    #[prost(message, optional, tag="2")]
    pub expires_at: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessKeyStatus {
    #[prost(enumeration="access_key_status::State", tag="1")]
    pub state: i32,
    #[prost(string, tag="2")]
    pub fingerprint: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub algorithm: ::prost::alloc::string::String,
    #[prost(int32, tag="4")]
    pub key_size: i32,
    #[prost(string, tag="5")]
    pub aws_access_key_id: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub secret: ::prost::alloc::string::String,
}
/// Nested message and enum types in `AccessKeyStatus`.
pub mod access_key_status {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        Active = 1,
        Inactive = 2,
        Expired = 3,
        Deleting = 4,
        Deleted = 5,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Active => "ACTIVE",
                State::Inactive => "INACTIVE",
                State::Expired => "EXPIRED",
                State::Deleting => "DELETING",
                State::Deleted => "DELETED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "INACTIVE" => Some(Self::Inactive),
                "EXPIRED" => Some(Self::Expired),
                "DELETING" => Some(Self::Deleting),
                "DELETED" => Some(Self::Deleted),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAccessKeyRequest {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<AccessKeySpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAccessKeyRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAccessKeyByAwsIdRequest {
    #[prost(string, tag="1")]
    pub aws_access_key_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAccessKeysRequest {
    /// Represents the container ID.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    /// Specifies the maximum number of items to return in the response.
    /// Default value: 10
    #[prost(int64, optional, tag="2")]
    pub page_size: ::core::option::Option<i64>,
    /// Token for pagination, allowing the retrieval of the next set of results.
    #[prost(string, tag="3")]
    pub page_token: ::prost::alloc::string::String,
    /// A filter to narrow down the results based on specific criteria.
    #[prost(string, tag="4")]
    pub filter: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAccessKeysByAccountRequest {
    /// Represents the parent account ID.
    #[prost(message, optional, tag="1")]
    pub account: ::core::option::Option<super::v1::Account>,
    /// Specifies the maximum number of items to return in the response.
    /// Default value: 10
    #[prost(int64, tag="2")]
    pub page_size: i64,
    /// Token for pagination, allowing the retrieval of the next set of results.
    #[prost(string, tag="3")]
    pub page_token: ::prost::alloc::string::String,
    /// A filter to narrow down the results based on specific criteria.
    #[prost(string, tag="4")]
    pub filter: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAccessKeyRequest {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<AccessKeySpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivateAccessKeyRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeactivateAccessKeyRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivateAccessKeyByAwsIdRequest {
    #[prost(string, tag="1")]
    pub aws_access_key_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeactivateAccessKeyByAwsIdRequest {
    #[prost(string, tag="1")]
    pub aws_access_key_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteAccessKeyRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteAccessKeyByAwsIdRequest {
    #[prost(string, tag="1")]
    pub aws_access_key_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAccessKeysResponse {
    /// List of access keys returned in the response. The field should be named as `items` for consistency.
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<AccessKey>,
    /// Token for pagination, indicating the next set of results can be retrieved using this token.
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
include!("nebius.iam.v2.serde.rs");
include!("nebius.iam.v2.tonic.rs");
// @@protoc_insertion_point(module)