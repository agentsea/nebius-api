// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaAllowanceSpec {
    /// Total amount of resources allocated.
    #[prost(uint64, optional, tag="1")]
    pub limit: ::core::option::Option<u64>,
    /// Name of the region where the quota is allocated.
    /// Example: "eu-north1".
    #[prost(string, tag="2")]
    pub region: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaAllowanceStatus {
    /// Current state of the quota.
    #[prost(enumeration="quota_allowance_status::State", tag="1")]
    pub state: i32,
    /// Current quota usage.
    #[prost(uint64, tag="2")]
    pub usage: u64,
    /// Service in which the quota is allocated.
    /// Example: "mk8s".
    #[prost(string, tag="3")]
    pub service: ::prost::alloc::string::String,
    /// Human-readable description of the quota.
    /// Example: "Total RAM across VMs".
    #[prost(string, tag="6")]
    pub description: ::prost::alloc::string::String,
    /// Human-readable name of the service managing the quota.
    /// Example: "Managed KubernetesÂ®".
    #[prost(string, tag="7")]
    pub service_description: ::prost::alloc::string::String,
    /// Quota unit.
    /// Example: "byte".
    #[prost(string, tag="8")]
    pub unit: ::prost::alloc::string::String,
    /// Current quota usage as a percentage.
    /// Values range from 0.0 to 1.0, representing 0% to 100%.
    /// Values can exceed 1.0 if usage exceeds the limit.
    /// Example: "0.12".
    #[prost(string, tag="9")]
    pub usage_percentage: ::prost::alloc::string::String,
    /// Current state of the quota usage.
    #[prost(enumeration="quota_allowance_status::UsageState", tag="10")]
    pub usage_state: i32,
}
/// Nested message and enum types in `QuotaAllowanceStatus`.
pub mod quota_allowance_status {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        /// Quota is being allocated; the process can take up to several minutes.
        Provisioning = 1,
        /// Quota is allocated and can be used.
        Active = 2,
        /// Quota has been removed and is no longer allocated.
        Deleted = 10,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Provisioning => "STATE_PROVISIONING",
                State::Active => "STATE_ACTIVE",
                State::Deleted => "STATE_DELETED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "STATE_PROVISIONING" => Some(Self::Provisioning),
                "STATE_ACTIVE" => Some(Self::Active),
                "STATE_DELETED" => Some(Self::Deleted),
                _ => None,
            }
        }
    }
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum UsageState {
        Unspecified = 0,
        /// Quota is actively in use.
        Used = 1,
        /// Quota is not currently in use.
        NotUsed = 2,
        /// Quota region is unreachable, the current usage is therefore unknown.
        /// Please, retry the request later.
        Unknown = 3,
    }
    impl UsageState {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                UsageState::Unspecified => "USAGE_STATE_UNSPECIFIED",
                UsageState::Used => "USAGE_STATE_USED",
                UsageState::NotUsed => "USAGE_STATE_NOT_USED",
                UsageState::Unknown => "USAGE_STATE_UNKNOWN",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "USAGE_STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "USAGE_STATE_USED" => Some(Self::Used),
                "USAGE_STATE_NOT_USED" => Some(Self::NotUsed),
                "USAGE_STATE_UNKNOWN" => Some(Self::Unknown),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaAllowance {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<QuotaAllowanceSpec>,
    #[prost(message, optional, tag="3")]
    pub status: ::core::option::Option<QuotaAllowanceStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListQuotaAllowancesRequest {
    /// ID of the Tenant or Project to list quotas for.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    /// Page size. Must be between \[1...1000\].
    /// Optional; if not specified, a reasonable default will be chosen by the service.
    #[prost(int64, tag="2")]
    pub page_size: i64,
    /// Listing continuation token. Pass an empty string to start listing from the first page.
    #[prost(string, tag="3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetQuotaAllowanceRequest {
    /// ID of the quota.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListQuotaAllowancesResponse {
    /// List of quotas on this result page.
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<QuotaAllowance>,
    /// Listing continuation token for the next page of results.
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetByNameRequest {
    /// ID of the Tenant or Project to list quotas for.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    /// Name of the quota.
    /// Example: "compute.disk.size.network-ssd".
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    /// Name of the region where the quota is allocated.
    /// Example: "eu-north1".
    #[prost(string, tag="3")]
    pub region: ::prost::alloc::string::String,
}
include!("nebius.quotas.v1.serde.rs");
include!("nebius.quotas.v1.tonic.rs");
// @@protoc_insertion_point(module)