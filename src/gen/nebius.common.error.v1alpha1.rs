// @generated
// This file is @generated by prost-build.
/// The request is invalid.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BadRequest {
    /// Describes all violations.
    #[prost(message, repeated, tag="1")]
    pub violations: ::prost::alloc::vec::Vec<bad_request::Violation>,
}
/// Nested message and enum types in `BadRequest`.
pub mod bad_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Violation {
        /// What field value is invalid.
        #[prost(string, tag="1")]
        pub field: ::prost::alloc::string::String,
        /// Description why the value is invalid, in English.
        #[prost(string, tag="2")]
        pub message: ::prost::alloc::string::String,
    }
}
/// The resource we are trying to use, create, change or delete is in a bad state and cannot be used.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BadResourceState {
    /// ID of the resource which is bad.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
    /// The reason why this state is bad and cannot be used.
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
}
/// Resource we are trying to interact with does not exist.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceNotFound {
    /// ID of the requested resource.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
}
/// Resource we are trying to create already exists.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceAlreadyExists {
    /// ID of the existing resource.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
}
/// There is a difference between the actual resource state and the expected one.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceConflict {
    /// ID of conflicting resource.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
    /// Detailed info about conflict.
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
}
/// Operation on the resource has been aborted by a subsequent operation.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationAborted {
    /// ID of the aborted operation
    #[prost(string, tag="1")]
    pub operation_id: ::prost::alloc::string::String,
    /// ID of the subsequent operation
    #[prost(string, tag="2")]
    pub aborted_by_operation_id: ::prost::alloc::string::String,
    /// Resource ID corresponding to both of the operations
    #[prost(string, tag="3")]
    pub resource_id: ::prost::alloc::string::String,
}
/// Indicates that element with requested parameters is exceeding the particular range.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OutOfRange {
    /// Requested value.
    #[prost(string, tag="1")]
    pub requested: ::prost::alloc::string::String,
    /// Available limit.
    #[prost(string, tag="2")]
    pub limit: ::prost::alloc::string::String,
}
/// Indicates that the action cannot be performed because there are insufficient access rights to a resource.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PermissionDenied {
    /// ID of the resource that cannot be accessed.
    #[prost(string, tag="1")]
    pub resource_id: ::prost::alloc::string::String,
}
/// Generic internal error.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InternalError {
    /// Error request ID.
    #[prost(string, tag="1")]
    pub request_id: ::prost::alloc::string::String,
    /// Trace ID for the failing request.
    #[prost(string, tag="2")]
    pub trace_id: ::prost::alloc::string::String,
}
/// You initiated too many requests to the service at once. Enhance your calm.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TooManyRequests {
    /// What request limit is exceeded (service-dependent).
    #[prost(string, tag="1")]
    pub violation: ::prost::alloc::string::String,
}
/// Indicates a failure due to exceeding specified limits or allocations in a system or service
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaFailure {
    /// Describes all quota violations
    #[prost(message, repeated, tag="1")]
    pub violations: ::prost::alloc::vec::Vec<quota_failure::Violation>,
}
/// Nested message and enum types in `QuotaFailure`.
pub mod quota_failure {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Violation {
        /// Which quota check failed.
        #[prost(string, tag="1")]
        pub quota: ::prost::alloc::string::String,
        /// A description of how the quota check failed.
        #[prost(string, tag="2")]
        pub message: ::prost::alloc::string::String,
        /// Maximum permissible value.
        #[prost(string, tag="3")]
        pub limit: ::prost::alloc::string::String,
        /// Requested value.
        #[prost(string, tag="4")]
        pub requested: ::prost::alloc::string::String,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceError {
    /// ID of Service which the error originated in. E.g. "dns".
    #[prost(string, tag="1")]
    pub service: ::prost::alloc::string::String,
    /// Detailed error code, service-specific. E.g. "DnsZoneNotEmpty".
    /// Name of the exception, without Exception suffix if not set
    /// Example: for PermissionDeniedException -> code == PermissionDenied
    #[prost(string, tag="2")]
    pub code: ::prost::alloc::string::String,
    /// Retry type tells how to provide retry, e.g.: just a single call or the whole logic before it.
    #[prost(enumeration="service_error::RetryType", tag="30")]
    pub retry_type: i32,
    /// Additional message describing the error, if any.
    #[prost(oneof="service_error::Details", tags="100, 110, 111, 112, 113, 120, 130, 131, 140, 141, 999")]
    pub details: ::core::option::Option<service_error::Details>,
}
/// Nested message and enum types in `ServiceError`.
pub mod service_error {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum RetryType {
        Unspecified = 0,
        /// Just retry the failed call.
        Call = 1,
        /// Retry whole logic before call and make a new one.
        UnitOfWork = 2,
        /// Do not retry, this is a fatal error.
        Nothing = 3,
    }
    impl RetryType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                RetryType::Unspecified => "UNSPECIFIED",
                RetryType::Call => "CALL",
                RetryType::UnitOfWork => "UNIT_OF_WORK",
                RetryType::Nothing => "NOTHING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "CALL" => Some(Self::Call),
                "UNIT_OF_WORK" => Some(Self::UnitOfWork),
                "NOTHING" => Some(Self::Nothing),
                _ => None,
            }
        }
    }
    /// Additional message describing the error, if any.
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Details {
        #[prost(message, tag="100")]
        BadRequest(super::BadRequest),
        #[prost(message, tag="110")]
        BadResourceState(super::BadResourceState),
        #[prost(message, tag="111")]
        ResourceNotFound(super::ResourceNotFound),
        #[prost(message, tag="112")]
        ResourceAlreadyExists(super::ResourceAlreadyExists),
        #[prost(message, tag="113")]
        OutOfRange(super::OutOfRange),
        #[prost(message, tag="120")]
        PermissionDenied(super::PermissionDenied),
        #[prost(message, tag="130")]
        ResourceConflict(super::ResourceConflict),
        #[prost(message, tag="131")]
        OperationAborted(super::OperationAborted),
        #[prost(message, tag="140")]
        TooManyRequests(super::TooManyRequests),
        #[prost(message, tag="141")]
        QuotaFailure(super::QuotaFailure),
        #[prost(message, tag="999")]
        InternalError(super::InternalError),
    }
}
include!("nebius.common.error.v1alpha1.serde.rs");
// @@protoc_insertion_point(module)