// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegionRouting {
    /// A list of fields to extract the NID from, in order of priority.
    /// The API Gateway will check each field in sequence and use the first valid NID it finds.
    /// This overrides the default NID lookup order: `id`, `parent_id`, `metadata.id`, `metadata.parent_id`.
    /// If the field contains a non-empty list of strings, all NIDs in the array must be valid and have the same routing code.
    #[prost(string, repeated, tag="1")]
    pub nid: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// If true, region routing is disabled for the method.
    /// When this is set, requests will not be forwarded to a different region, even if an NID is present.
    #[prost(bool, tag="2")]
    pub disabled: bool,
    /// In strict mode, the API Gateway returns an INVALID_ARGUMENT error to the user when a routing error occurs,
    /// rather than forwarding the request to the local region.
    #[prost(bool, tag="3")]
    pub strict: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeprecationDetails {
    /// The date when this method, service, message or field will stop working (format: YYYY-MM-DD)
    #[prost(string, tag="1")]
    pub effective_at: ::prost::alloc::string::String,
    /// A description to help users understand the reason for deprecation and suggest alternatives
    #[prost(string, tag="2")]
    pub description: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ResourceBehavior {
    /// The behavior of the resource is unspecified.
    /// Avoid using this default value.
    Unspecified = 0,
    /// Indicates that the resource can be moved to another parent, typically an
    /// IAM container, though not necessarily limited to this.
    /// This behavior suggests that the `metadata.parent_id` attribute could be modified.
    Movable = 1,
    /// Indicates that the resource name can be unspecified or does not follow
    /// uniqueness requirement within parent_id and resource type.
    Unnamed = 2,
    /// Indicates that the resource is named, and the name cannot be changed after
    /// it is created. It is strongly recommended to do srvices with renaming
    /// capability, as the guidelines suggest.
    ImmutableName = 3,
}
impl ResourceBehavior {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ResourceBehavior::Unspecified => "RESOURCE_BEHAVIOR_UNSPECIFIED",
            ResourceBehavior::Movable => "MOVABLE",
            ResourceBehavior::Unnamed => "UNNAMED",
            ResourceBehavior::ImmutableName => "IMMUTABLE_NAME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RESOURCE_BEHAVIOR_UNSPECIFIED" => Some(Self::Unspecified),
            "MOVABLE" => Some(Self::Movable),
            "UNNAMED" => Some(Self::Unnamed),
            "IMMUTABLE_NAME" => Some(Self::ImmutableName),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FieldBehavior {
    Unspecified = 0,
    /// This indicates that the field can't be changed during a resource update.
    /// Changing the field value will cause an `INVALID_ARGUMENT` error.
    /// Resource recreate requires a change of the field value.
    Immutable = 2,
    /// Indicates field is a resource ID, so it MUST be present on a resource
    /// update, but MUST NOT be set on create.
    /// Otherwise, RPC will fail with the `INVALID_ARGUMENT` error
    Identifier = 3,
    /// Indicates field is not present in output.
    InputOnly = 4,
    /// Indicates field can't be set on create or changed on update.
    /// Otherwise, RPC will fail with the `INVALID_ARGUMENT` error
    OutputOnly = 5,
    /// Indicates that an empty message and a null have different semantics.
    /// Usually, that field is a feature spec message: its empty message enables
    /// that feature, and null disables it. Such a message is different from `bool`
    /// because it already has some feature parameters, or they can be added later
    /// in a backward-compatible way.
    /// IMPORTANT: if the message itself is recursive, this behavior is forced.
    MeaningfulEmptyValue = 6,
    /// Indicates that an empty (default) value will be filled by the server.
    /// Usually, that field is a feature spec value, which by default is computed.
    /// Values marked with this annotation won't raise error if they are not set
    /// and the returned value is not equal to protobuf default.
    ///
    /// IMPORTANT:
    /// Updating this value from explicit to default may not lead to Update call in
    /// some tools (eg Terraform).
    /// Compound values (messages, lists and maps) may result in unpredictable
    /// updates (see examples in guidelines).
    NonEmptyDefault = 7,
}
impl FieldBehavior {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            FieldBehavior::Unspecified => "FIELD_BEHAVIOR_UNSPECIFIED",
            FieldBehavior::Immutable => "IMMUTABLE",
            FieldBehavior::Identifier => "IDENTIFIER",
            FieldBehavior::InputOnly => "INPUT_ONLY",
            FieldBehavior::OutputOnly => "OUTPUT_ONLY",
            FieldBehavior::MeaningfulEmptyValue => "MEANINGFUL_EMPTY_VALUE",
            FieldBehavior::NonEmptyDefault => "NON_EMPTY_DEFAULT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIELD_BEHAVIOR_UNSPECIFIED" => Some(Self::Unspecified),
            "IMMUTABLE" => Some(Self::Immutable),
            "IDENTIFIER" => Some(Self::Identifier),
            "INPUT_ONLY" => Some(Self::InputOnly),
            "OUTPUT_ONLY" => Some(Self::OutputOnly),
            "MEANINGFUL_EMPTY_VALUE" => Some(Self::MeaningfulEmptyValue),
            "NON_EMPTY_DEFAULT" => Some(Self::NonEmptyDefault),
            _ => None,
        }
    }
}
include!("nebius.serde.rs");
// @@protoc_insertion_point(module)