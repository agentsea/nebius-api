// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClusterStatus {
    /// Current phase of the cluster.
    #[prost(enumeration="cluster_status::Phase", tag="1")]
    pub phase: i32,
    /// State reflects substatus of the phase to define whether it's healthy or not.
    #[prost(enumeration="cluster_status::State", tag="2")]
    pub state: i32,
    #[prost(bool, tag="100")]
    pub reconciling: bool,
}
/// Nested message and enum types in `ClusterStatus`.
pub mod cluster_status {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Phase {
        Unspecified = 0,
        Provisioning = 1,
        Running = 2,
        Updating = 3,
        Deleting = 4,
        Deleted = 5,
        Purging = 6,
        Stopping = 7,
        Resuming = 8,
    }
    impl Phase {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Phase::Unspecified => "PHASE_UNSPECIFIED",
                Phase::Provisioning => "PHASE_PROVISIONING",
                Phase::Running => "PHASE_RUNNING",
                Phase::Updating => "PHASE_UPDATING",
                Phase::Deleting => "PHASE_DELETING",
                Phase::Deleted => "PHASE_DELETED",
                Phase::Purging => "PHASE_PURGING",
                Phase::Stopping => "PHASE_STOPPING",
                Phase::Resuming => "PHASE_RESUMING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PHASE_UNSPECIFIED" => Some(Self::Unspecified),
                "PHASE_PROVISIONING" => Some(Self::Provisioning),
                "PHASE_RUNNING" => Some(Self::Running),
                "PHASE_UPDATING" => Some(Self::Updating),
                "PHASE_DELETING" => Some(Self::Deleting),
                "PHASE_DELETED" => Some(Self::Deleted),
                "PHASE_PURGING" => Some(Self::Purging),
                "PHASE_STOPPING" => Some(Self::Stopping),
                "PHASE_RESUMING" => Some(Self::Resuming),
                _ => None,
            }
        }
    }
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        InProgress = 1,
        Finished = 2,
        Error = 3,
        Degraded = 4,
        Scheduled = 5,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::InProgress => "STATE_IN_PROGRESS",
                State::Finished => "STATE_FINISHED",
                State::Error => "STATE_ERROR",
                State::Degraded => "STATE_DEGRADED",
                State::Scheduled => "STATE_SCHEDULED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "STATE_IN_PROGRESS" => Some(Self::InProgress),
                "STATE_FINISHED" => Some(Self::Finished),
                "STATE_ERROR" => Some(Self::Error),
                "STATE_DEGRADED" => Some(Self::Degraded),
                "STATE_SCHEDULED" => Some(Self::Scheduled),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRequest {
    /// ID of the entity to retrieve.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetByNameRequest {
    /// Parent ID of entity to retrieve.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    /// Name of the entity to retrieve.
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRequest {
    /// ID of the entity to delete.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartRequest {
    /// ID of the entity to start.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopRequest {
    /// ID of the entity to stop.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRequest {
    /// Identifier of IAM container to list from.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    /// Specifies the maximum number of items to return in the response. Default value is 100.
    #[prost(int64, tag="2")]
    pub page_size: i64,
    /// Token for pagination, allowing the retrieval of the next set of results.
    #[prost(string, tag="3")]
    pub page_token: ::prost::alloc::string::String,
}
include!("nebius.msp.v1alpha1.serde.rs");
// @@protoc_insertion_point(module)