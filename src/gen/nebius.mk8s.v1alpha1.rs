// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cluster {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<ClusterSpec>,
    #[prost(message, optional, tag="3")]
    pub status: ::core::option::Option<ClusterStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterSpec {
    #[prost(message, optional, tag="2")]
    pub control_plane: ::core::option::Option<ControlPlaneSpec>,
    /// Defines kubernetes network configuration, like IP allocation.
    #[prost(message, optional, tag="3")]
    pub kube_network: ::core::option::Option<KubeNetworkSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControlPlaneSpec {
    /// Version is desired Kubernetes version of the cluster. For now only acceptable format is
    /// `MAJOR.MINOR` like "1.30". Option for patch version update will be added later.
    #[prost(string, tag="1")]
    pub version: ::prost::alloc::string::String,
    /// Subnet ID where control plane instances will be located.
    #[prost(string, tag="2")]
    pub subnet_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub endpoints: ::core::option::Option<ControlPlaneEndpointsSpec>,
    /// Number of instances in etcd cluster.
    /// 3 by default.
    /// Control plane with `etcd_cluster_size: 3` called "Highly Available" ("HA"), because it's Kubernetes API
    /// will be available despite a failure of one control plane instance.
    #[prost(int64, tag="4")]
    pub etcd_cluster_size: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ControlPlaneEndpointsSpec {
    /// PublicEndpointSpec is a specification of public endpoint for control plane.
    #[prost(message, optional, tag="1")]
    pub public_endpoint: ::core::option::Option<PublicEndpointSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PublicEndpointSpec {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KubeNetworkSpec {
    /// CIDR blocks for Service ClusterIP allocation.
    /// For now, only one value is supported.
    /// Must be a valid CIDR block or prefix length.
    /// In case of prefix length, certain CIDR is auto allocated.
    /// Specified CIDR blocks will be reserved in Cluster.spec.control_plane.subnet_id to prevent address duplication.
    /// Allowed prefix length is from "/12" to "/28".
    /// Empty value treated as \["/16"\].
    #[prost(string, repeated, tag="1")]
    pub service_cidrs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterStatus {
    #[prost(enumeration="cluster_status::State", tag="1")]
    pub state: i32,
    #[prost(message, optional, tag="2")]
    pub control_plane: ::core::option::Option<ControlPlaneStatus>,
    /// Show that changes are in flight
    #[prost(bool, tag="100")]
    pub reconciling: bool,
}
/// Nested message and enum types in `ClusterStatus`.
pub mod cluster_status {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        Provisioning = 1,
        Running = 2,
        Deleting = 3,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Provisioning => "PROVISIONING",
                State::Running => "RUNNING",
                State::Deleting => "DELETING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "PROVISIONING" => Some(Self::Provisioning),
                "RUNNING" => Some(Self::Running),
                "DELETING" => Some(Self::Deleting),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControlPlaneStatus {
    /// Version have format `major.minor.patch-nebius-cp.n` like "1.30.0-nebius-cp.3".
    #[prost(string, tag="1")]
    pub version: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub endpoints: ::core::option::Option<ControlPlaneStatusEndpoints>,
    /// Number of instances in etcd cluster.
    #[prost(int64, tag="3")]
    pub etcd_cluster_size: i64,
    #[prost(message, optional, tag="100")]
    pub auth: ::core::option::Option<ControlPlaneStatusAuth>,
}
/// Endpoints of Kubernetes control plane. Kubernetes API can be accessed at `<https://endpoint/`.>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControlPlaneStatusEndpoints {
    /// DNS name or IP address accessible from the Internet.
    #[prost(string, tag="1")]
    pub public_endpoint: ::prost::alloc::string::String,
    /// DNS name or IP address accessible from the user VPC.
    #[prost(string, tag="2")]
    pub private_endpoint: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControlPlaneStatusAuth {
    #[prost(string, tag="1")]
    pub cluster_ca_certificate: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateClusterRequest {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<ClusterSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClusterRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub resource_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClusterByNameRequest {
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListClustersRequest {
    /// ID of the IAM container we are listing the resources in.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    /// Specifies the maximum number of items to return in the response.
    #[prost(int64, tag="2")]
    pub page_size: i64,
    /// Token for pagination, allowing the retrieval of the next set of results.
    #[prost(string, tag="3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListClustersResponse {
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<Cluster>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateClusterRequest {
    /// Metadata associated with the instance.
    /// Includes ID of the instance to update.
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::common::v1::ResourceMetadata>,
    /// Updated specifications for the instance.
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<ClusterSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteClusterRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Condition {
    /// Type of condition. Should be CamelCase
    #[prost(string, tag="1")]
    pub r#type: ::prost::alloc::string::String,
    /// Status of the condition, one of TRUE, FALSE or UNKNOWN.
    #[prost(enumeration="condition::Status", tag="2")]
    pub status: i32,
    /// The last time the condition transitioned from one status to another.
    #[prost(message, optional, tag="3")]
    pub last_transition_at: ::core::option::Option<::pbjson_types::Timestamp>,
    /// The reason for the condition's last transition in CamelCase.
    /// The values are considered a guaranteed API.
    #[prost(string, tag="4")]
    pub reason: ::prost::alloc::string::String,
    /// Explicit classification of Reason code, so the users or machines can immediately
    /// understand the current situation and act accordingly.
    #[prost(enumeration="condition::Severity", tag="5")]
    pub severity: i32,
    /// A human readable description message of this detail.
    #[prost(string, tag="6")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, optional, tag="7")]
    pub last_transition_error: ::core::option::Option<condition::TransitionError>,
}
/// Nested message and enum types in `Condition`.
pub mod condition {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TransitionError {
        #[prost(string, tag="1")]
        pub reason: ::prost::alloc::string::String,
        #[prost(string, tag="2")]
        pub description: ::prost::alloc::string::String,
    }
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Severity {
        /// Should apply only if the condition is in state "True".
        None = 0,
        /// Specifies that a failure of a condition type
        /// should be viewed as purely informational
        Info = 1,
        /// Specifies that a failure of a condition type
        /// should be viewed as an error.
        Error = 2,
    }
    impl Severity {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Severity::None => "NONE",
                Severity::Info => "INFO",
                Severity::Error => "ERROR",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "NONE" => Some(Self::None),
                "INFO" => Some(Self::Info),
                "ERROR" => Some(Self::Error),
                _ => None,
            }
        }
    }
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Status {
        Unknown = 0,
        True = 1,
        False = 2,
    }
    impl Status {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Status::Unknown => "UNKNOWN",
                Status::True => "TRUE",
                Status::False => "FALSE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "TRUE" => Some(Self::True),
                "FALSE" => Some(Self::False),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DiskSpec {
    #[prost(int64, tag="5")]
    pub block_size_bytes: i64,
    #[prost(enumeration="disk_spec::DiskType", tag="6")]
    pub r#type: i32,
    #[prost(oneof="disk_spec::Size", tags="1, 2, 3, 4")]
    pub size: ::core::option::Option<disk_spec::Size>,
}
/// Nested message and enum types in `DiskSpec`.
pub mod disk_spec {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum DiskType {
        Unspecified = 0,
        /// the list of available types will be clarified later, it is not final version
        NetworkSsd = 1,
        NetworkHdd = 2,
        NetworkSsdIoM3 = 3,
        NetworkSsdNonReplicated = 4,
    }
    impl DiskType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                DiskType::Unspecified => "UNSPECIFIED",
                DiskType::NetworkSsd => "NETWORK_SSD",
                DiskType::NetworkHdd => "NETWORK_HDD",
                DiskType::NetworkSsdIoM3 => "NETWORK_SSD_IO_M3",
                DiskType::NetworkSsdNonReplicated => "NETWORK_SSD_NON_REPLICATED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "NETWORK_SSD" => Some(Self::NetworkSsd),
                "NETWORK_HDD" => Some(Self::NetworkHdd),
                "NETWORK_SSD_IO_M3" => Some(Self::NetworkSsdIoM3),
                "NETWORK_SSD_NON_REPLICATED" => Some(Self::NetworkSsdNonReplicated),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Size {
        #[prost(int64, tag="1")]
        SizeBytes(i64),
        #[prost(int64, tag="2")]
        SizeKibibytes(i64),
        #[prost(int64, tag="3")]
        SizeMebibytes(i64),
        #[prost(int64, tag="4")]
        SizeGibibytes(i64),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourcesSpec {
    #[prost(string, tag="1")]
    pub platform: ::prost::alloc::string::String,
    #[prost(oneof="resources_spec::Size", tags="2")]
    pub size: ::core::option::Option<resources_spec::Size>,
}
/// Nested message and enum types in `ResourcesSpec`.
pub mod resources_spec {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Size {
        #[prost(string, tag="2")]
        Preset(::prost::alloc::string::String),
    }
}
/// NodeGroup represents Kubernetes node pool
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeGroup {
    /// the parent_id is an ID of Cluster
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<NodeGroupSpec>,
    #[prost(message, optional, tag="3")]
    pub status: ::core::option::Option<NodeGroupStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeGroupSpec {
    /// Version is desired Kubernetes version of the cluster. For now only acceptable format is
    /// `MAJOR.MINOR` like "1.30". Option for patch version update will be added later.
    /// By default the cluster control plane MAJOR.MINOR version will be used.
    #[prost(string, tag="1")]
    pub version: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub template: ::core::option::Option<NodeTemplate>,
    #[prost(message, optional, tag="4")]
    pub strategy: ::core::option::Option<NodeGroupDeploymentStrategy>,
    #[prost(oneof="node_group_spec::Size", tags="2, 5")]
    pub size: ::core::option::Option<node_group_spec::Size>,
}
/// Nested message and enum types in `NodeGroupSpec`.
pub mod node_group_spec {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Size {
        #[prost(int64, tag="2")]
        FixedNodeCount(i64),
        #[prost(message, tag="5")]
        Autoscaling(super::NodeGroupAutoscalingSpec),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeTemplate {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<NodeMetadataTemplate>,
    #[prost(message, repeated, tag="2")]
    pub taints: ::prost::alloc::vec::Vec<NodeTaint>,
    #[prost(message, optional, tag="3")]
    pub resources: ::core::option::Option<ResourcesSpec>,
    #[prost(message, optional, tag="9")]
    pub boot_disk: ::core::option::Option<DiskSpec>,
    /// GPU-related settings.
    #[prost(message, optional, tag="13")]
    pub gpu_settings: ::core::option::Option<GpuSettings>,
    #[prost(message, optional, tag="4")]
    pub gpu_cluster: ::core::option::Option<GpuClusterSpec>,
    #[prost(message, repeated, tag="5")]
    pub network_interfaces: ::prost::alloc::vec::Vec<NetworkInterfaceTemplate>,
    #[prost(message, repeated, tag="7")]
    pub filesystems: ::prost::alloc::vec::Vec<AttachedFilesystemSpec>,
    /// cloud-init user-data. Must contain at least one SSH key.
    #[prost(string, tag="6")]
    pub cloud_init_user_data: ::prost::alloc::string::String,
    /// the Nebius service account whose credentials will be available on the nodes of the group.
    /// With these credentials, it is possible to make `npc` or public API requests from the nodes without the need for extra authentication.
    /// This service account is also used to make requests to container registry.
    ///
    /// `resource.serviceaccount.issueAccessToken` permission is required to use this field.
    #[prost(string, tag="10")]
    pub service_account_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeMetadataTemplate {
    /// Labels will be propagated into nodes metadata.
    /// System labels containing "kubernetes.io" and "k8s.io" will not be propagated.
    /// On update labels they will not be updated in nodes right away, only on node group update.
    #[prost(map="string, string", tag="1")]
    pub labels: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// GPU-related settings.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GpuSettings {
    /// Identifier of the predefined set of drivers included in the ComputeImage deployed on ComputeInstances that are part of the NodeGroup.
    /// Supported presets: cuda12
    #[prost(string, tag="1")]
    pub drivers_preset: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GpuClusterSpec {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetworkInterfaceTemplate {
    /// Public IPv4 address associated with the interface.
    #[prost(message, optional, tag="1")]
    pub public_ip_address: ::core::option::Option<PublicIpAddress>,
    /// Subnet ID that will be attached to a node cloud intstance network interface.
    /// By default control plane subnet_id used.
    /// Subnet should be located in the same network with control plane and have same parent ID as cluster.
    #[prost(string, tag="3")]
    pub subnet_id: ::prost::alloc::string::String,
}
/// Describes a public IP address.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PublicIpAddress {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttachedFilesystemSpec {
    #[prost(enumeration="attached_filesystem_spec::AttachMode", tag="1")]
    pub attach_mode: i32,
    #[prost(string, tag="2")]
    pub device_name: ::prost::alloc::string::String,
    #[prost(oneof="attached_filesystem_spec::Type", tags="3")]
    pub r#type: ::core::option::Option<attached_filesystem_spec::Type>,
}
/// Nested message and enum types in `AttachedFilesystemSpec`.
pub mod attached_filesystem_spec {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum AttachMode {
        Unspecified = 0,
        ReadOnly = 1,
        ReadWrite = 2,
    }
    impl AttachMode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                AttachMode::Unspecified => "UNSPECIFIED",
                AttachMode::ReadOnly => "READ_ONLY",
                AttachMode::ReadWrite => "READ_WRITE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "READ_ONLY" => Some(Self::ReadOnly),
                "READ_WRITE" => Some(Self::ReadWrite),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        #[prost(message, tag="3")]
        ExistingFilesystem(super::ExistingFilesystem),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExistingFilesystem {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NodeGroupAutoscalingSpec {
    #[prost(int64, tag="1")]
    pub min_node_count: i64,
    #[prost(int64, tag="2")]
    pub max_node_count: i64,
}
/// See <https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeTaint {
    #[prost(string, tag="1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub value: ::prost::alloc::string::String,
    #[prost(enumeration="node_taint::Effect", tag="3")]
    pub effect: i32,
}
/// Nested message and enum types in `NodeTaint`.
pub mod node_taint {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Effect {
        Unspecified = 0,
        NoExecute = 1,
        NoSchedule = 2,
        PreferNoSchedule = 3,
    }
    impl Effect {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Effect::Unspecified => "EFFECT_UNSPECIFIED",
                Effect::NoExecute => "NO_EXECUTE",
                Effect::NoSchedule => "NO_SCHEDULE",
                Effect::PreferNoSchedule => "PREFER_NO_SCHEDULE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "EFFECT_UNSPECIFIED" => Some(Self::Unspecified),
                "NO_EXECUTE" => Some(Self::NoExecute),
                "NO_SCHEDULE" => Some(Self::NoSchedule),
                "PREFER_NO_SCHEDULE" => Some(Self::PreferNoSchedule),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NodeGroupDeploymentStrategy {
    /// The maximum number of machines that can be unavailable during the update.
    /// Value can be an absolute number (ex: 5) or a percentage of desired
    /// machines (ex: 10%).
    /// Absolute number is calculated from percentage by rounding down.
    /// This can not be 0 if MaxSurge is 0.
    /// Defaults to 0.
    /// Example: when this is set to 30%, the old MachineSet can be scaled
    /// down to 70% of desired machines immediately when the rolling update
    /// starts. Once new machines are ready, old MachineSet can be scaled
    /// down further, followed by scaling up the new MachineSet, ensuring
    /// that the total number of machines available at all times
    /// during the update is at least 70% of desired machines.
    #[prost(message, optional, tag="1")]
    pub max_unavailable: ::core::option::Option<PercentOrCount>,
    /// The maximum number of machines that can be scheduled above the
    /// desired number of machines.
    /// Value can be an absolute number (ex: 5) or a percentage of
    /// desired machines (ex: 10%).
    /// This can not be 0 if MaxUnavailable is 0.
    /// Absolute number is calculated from percentage by rounding up.
    /// Defaults to 1.
    /// Example: when this is set to 30%, the new MachineSet can be scaled
    /// up immediately when the rolling update starts, such that the total
    /// number of old and new machines do not exceed 130% of desired
    /// machines. Once old machines have been killed, new MachineSet can
    /// be scaled up further, ensuring that total number of machines running
    /// at any time during the update is at most 130% of desired machines.
    #[prost(message, optional, tag="2")]
    pub max_surge: ::core::option::Option<PercentOrCount>,
    /// DrainTimeout is the total amount of time that the service will spend on draining a node.
    /// By default, node can be drained without any time limitations.
    /// NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
    #[prost(message, optional, tag="3")]
    pub drain_timeout: ::core::option::Option<::pbjson_types::Duration>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PercentOrCount {
    #[prost(oneof="percent_or_count::Value", tags="1, 2")]
    pub value: ::core::option::Option<percent_or_count::Value>,
}
/// Nested message and enum types in `PercentOrCount`.
pub mod percent_or_count {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(int64, tag="1")]
        Percent(i64),
        #[prost(int64, tag="2")]
        Count(i64),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeGroupStatus {
    #[prost(enumeration="node_group_status::State", tag="1")]
    pub state: i32,
    /// Version have format `MAJOR.MINOR.PATCH-nebius-node.n` like "1.30.0-nebius-node.10".
    #[prost(string, tag="2")]
    pub version: ::prost::alloc::string::String,
    /// Desired total number of nodes that should be in the node group.
    /// It is either fixed_node_count or arbitrary number between min_node_count and max_node_count decided by autoscaler.
    #[prost(int64, tag="3")]
    pub target_node_count: i64,
    /// Total number of nodes that are currently in the node group.
    /// Both ready and not ready nodes are counted.
    #[prost(int64, tag="4")]
    pub node_count: i64,
    /// Total number of nodes that has outdated node configuration.
    /// These nodes will be replaced by new nodes with up-to-date configuration.
    #[prost(int64, tag="5")]
    pub outdated_node_count: i64,
    /// Total number of nodes that successfully joined the cluster and are ready to serve workloads.
    /// Both outdated and up-to-date nodes are counted.
    #[prost(int64, tag="6")]
    pub ready_node_count: i64,
    #[prost(message, repeated, tag="50")]
    pub conditions: ::prost::alloc::vec::Vec<Condition>,
    /// Show that changes are in flight
    #[prost(bool, tag="100")]
    pub reconciling: bool,
}
/// Nested message and enum types in `NodeGroupStatus`.
pub mod node_group_status {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum State {
        Unspecified = 0,
        Provisioning = 1,
        Running = 2,
        Deleting = 3,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                State::Unspecified => "STATE_UNSPECIFIED",
                State::Provisioning => "PROVISIONING",
                State::Running => "RUNNING",
                State::Deleting => "DELETING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "PROVISIONING" => Some(Self::Provisioning),
                "RUNNING" => Some(Self::Running),
                "DELETING" => Some(Self::Deleting),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateNodeGroupRequest {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<NodeGroupSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNodeGroupRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub resource_version: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNodeGroupByNameRequest {
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNodeGroupsRequest {
    /// ID of the parent Cluster.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    /// Specifies the maximum number of items to return in the response.
    #[prost(int64, tag="2")]
    pub page_size: i64,
    /// Token for pagination, allowing the retrieval of the next set of results.
    #[prost(string, tag="3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNodeGroupsResponse {
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<NodeGroup>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateNodeGroupRequest {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<NodeGroupSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteNodeGroupRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpgradeNodeGroupRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(oneof="upgrade_node_group_request::UpgradeType", tags="2")]
    pub upgrade_type: ::core::option::Option<upgrade_node_group_request::UpgradeType>,
}
/// Nested message and enum types in `UpgradeNodeGroupRequest`.
pub mod upgrade_node_group_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum UpgradeType {
        /// Upgrades to the latest infra version, which includes latest supported kubernetes patch version. Kubernetes minor version remain the same.
        #[prost(message, tag="2")]
        LatestInfraVersion(::pbjson_types::Empty),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProgressData {
    /// Problems encountered during the operation execution.
    #[prost(message, repeated, tag="1")]
    pub problems: ::prost::alloc::vec::Vec<Problem>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Problem {
    /// Stage on which the problem occurred.
    #[prost(string, tag="1")]
    pub stage: ::prost::alloc::string::String,
    /// Message describing the problem.
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
}
include!("nebius.mk8s.v1alpha1.serde.rs");
include!("nebius.mk8s.v1alpha1.tonic.rs");
// @@protoc_insertion_point(module)