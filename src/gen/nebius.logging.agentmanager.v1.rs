// @generated
// This file is @generated by prost-build.
/// Request message for GetVersion RPC containing agent status and system information.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVersionRequest {
    /// Type of the agent. Must be O11Y_AGENT (1).
    #[prost(enumeration="AgentType", tag="1")]
    pub r#type: i32,
    /// Current version of the agent software.
    #[prost(string, tag="2")]
    pub agent_version: ::prost::alloc::string::String,
    /// Version of the updater component.
    #[prost(string, tag="3")]
    pub updater_version: ::prost::alloc::string::String,
    /// Parent identifier for the VM
    #[prost(string, tag="4")]
    pub parent_id: ::prost::alloc::string::String,
    /// Unique identifier for the instance where agent is running.
    #[prost(string, tag="5")]
    pub instance_id: ::prost::alloc::string::String,
    /// Detailed information about the operating system.
    #[prost(message, optional, tag="6")]
    pub os_info: ::core::option::Option<OsInfo>,
    /// Current operational state of the agent.
    #[prost(enumeration="AgentState", tag="7")]
    pub agent_state: i32,
    /// Time duration since the agent started.
    #[prost(message, optional, tag="8")]
    pub agent_uptime: ::core::option::Option<::pbjson_types::Duration>,
    /// Total system uptime.
    #[prost(message, optional, tag="9")]
    pub system_uptime: ::core::option::Option<::pbjson_types::Duration>,
    /// Time duration since the updater component started.
    #[prost(message, optional, tag="10")]
    pub updater_uptime: ::core::option::Option<::pbjson_types::Duration>,
    /// Status messages from the agent describing its current state.
    #[prost(string, repeated, tag="11")]
    pub agent_state_messages: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Description of the last update failure, if any.
    #[prost(string, tag="12")]
    pub last_update_error: ::prost::alloc::string::String,
    /// Managed Kubernetes cluster identifier, if applicable.
    #[prost(string, tag="13")]
    pub mk8s_cluster_id: ::prost::alloc::string::String,
    /// Health status of individual agent modules.
    #[prost(message, optional, tag="14")]
    pub modules_health: ::core::option::Option<ModulesHealth>,
    /// Status of cloud initialization process.
    #[prost(string, tag="15")]
    pub cloud_init_status: ::prost::alloc::string::String,
    /// Indicates if a fallback method was used to determine instance_id.
    #[prost(bool, tag="16")]
    pub instance_id_used_fallback: bool,
    /// Recent agent log entries for diagnostic purposes.
    #[prost(string, tag="17")]
    pub last_agent_logs: ::prost::alloc::string::String,
    /// Model of the GPU used in the system.
    #[prost(string, tag="18")]
    pub gpu_model: ::prost::alloc::string::String,
    /// Number of GPUs available in the system.
    #[prost(int32, tag="19")]
    pub gpu_number: i32,
    /// Version of the DCGM (Data Center GPU Manager) used.
    #[prost(string, tag="20")]
    pub dcgm_version: ::prost::alloc::string::String,
}
/// Health status information for all agent modules.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModulesHealth {
    /// Health status of the process module.
    #[prost(message, optional, tag="1")]
    pub process: ::core::option::Option<ModuleHealth>,
    /// Health status of the GPU pipeline module.
    #[prost(message, optional, tag="2")]
    pub gpu_pipeline: ::core::option::Option<ModuleHealth>,
    /// Health status of the CPU pipeline module.
    #[prost(message, optional, tag="3")]
    pub cpu_pipeline: ::core::option::Option<ModuleHealth>,
    /// Health status of the Cilium pipeline module.
    #[prost(message, optional, tag="4")]
    pub cilium_pipeline: ::core::option::Option<ModuleHealth>,
}
/// Health status information for an individual module.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModuleHealth {
    /// Current operational state of the module.
    #[prost(enumeration="AgentState", tag="1")]
    pub state: i32,
    /// Status messages describing the module's state.
    #[prost(string, repeated, tag="2")]
    pub messages: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Current parameters of the module.
    #[prost(message, repeated, tag="3")]
    pub parameters: ::prost::alloc::vec::Vec<Parameter>,
}
/// Key-value parameter for module configuration.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Parameter {
    /// Name of the parameter.
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    /// Value of the parameter.
    #[prost(string, tag="2")]
    pub value: ::prost::alloc::string::String,
}
/// Operating system information for the instance.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OsInfo {
    /// Operating system name and version.
    /// Example: "Ubuntu 22.04.4 LTS"
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    /// Detailed system information from uname command.
    /// Example: "Linux computeimage-abcdef 6.5.0-44-generic #44~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Tue Jun 18 14:36:16 UTC 2 x86_64 x86_64 x86_64 GNU/Linux"
    #[prost(string, tag="2")]
    pub uname: ::prost::alloc::string::String,
    /// System architecture.
    #[prost(string, tag="3")]
    pub architecture: ::prost::alloc::string::String,
}
/// Response message for GetVersion RPC containing required action for the agent.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVersionResponse {
    /// Required action for the agent to take.
    #[prost(enumeration="Action", tag="1")]
    pub action: i32,
    /// Parameters specific to the required action.
    #[prost(oneof="get_version_response::Response", tags="2, 3, 4")]
    pub response: ::core::option::Option<get_version_response::Response>,
}
/// Nested message and enum types in `GetVersionResponse`.
pub mod get_version_response {
    /// Parameters specific to the required action.
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        /// Parameters for no-operation action.
        #[prost(message, tag="2")]
        Nop(super::NopActionParams),
        /// Parameters for update action.
        #[prost(message, tag="3")]
        Update(super::UpdateActionParams),
        /// Parameters for restart action.
        #[prost(message, tag="4")]
        Restart(super::RestartActionParams),
    }
}
/// Parameters when no operation is required.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NopActionParams {
}
/// Parameters for agent update action.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateActionParams {
    /// Target version for the update.
    #[prost(string, tag="1")]
    pub version: ::prost::alloc::string::String,
    /// URL of the repository containing the update.
    #[prost(string, tag="2")]
    pub repo_url: ::prost::alloc::string::String,
}
/// Parameters for agent restart action.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RestartActionParams {
}
/// Type of the agent in the system.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AgentType {
    /// Default undefined state.
    AgentUndefined = 0,
    /// Observability agent type.
    O11yAgent = 1,
}
impl AgentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AgentType::AgentUndefined => "AGENT_UNDEFINED",
            AgentType::O11yAgent => "O11Y_AGENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AGENT_UNDEFINED" => Some(Self::AgentUndefined),
            "O11Y_AGENT" => Some(Self::O11yAgent),
            _ => None,
        }
    }
}
/// Current operational state of the agent.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AgentState {
    /// Default undefined state.
    StateUndefined = 0,
    /// Agent is functioning normally.
    StateHealthy = 1,
    /// Agent is in error state.
    StateError = 2,
}
impl AgentState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AgentState::StateUndefined => "STATE_UNDEFINED",
            AgentState::StateHealthy => "STATE_HEALTHY",
            AgentState::StateError => "STATE_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATE_UNDEFINED" => Some(Self::StateUndefined),
            "STATE_HEALTHY" => Some(Self::StateHealthy),
            "STATE_ERROR" => Some(Self::StateError),
            _ => None,
        }
    }
}
/// Action to be taken by the agent based on version check.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Action {
    /// Default undefined action.
    Undefined = 0,
    /// No operation needed.
    Nop = 1,
    /// Update to new version required.
    Update = 2,
    /// Agent restart required.
    Restart = 3,
}
impl Action {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Action::Undefined => "ACTION_UNDEFINED",
            Action::Nop => "NOP",
            Action::Update => "UPDATE",
            Action::Restart => "RESTART",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ACTION_UNDEFINED" => Some(Self::Undefined),
            "NOP" => Some(Self::Nop),
            "UPDATE" => Some(Self::Update),
            "RESTART" => Some(Self::Restart),
            _ => None,
        }
    }
}
include!("nebius.logging.agentmanager.v1.serde.rs");
include!("nebius.logging.agentmanager.v1.tonic.rs");
// @@protoc_insertion_point(module)