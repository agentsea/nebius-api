// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Endpoint {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<EndpointSpec>,
    #[prost(message, optional, tag="3")]
    pub status: ::core::option::Option<EndpointStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndpointSpec {
    /// Description of the endpoint.
    #[prost(string, tag="1")]
    pub description: ::prost::alloc::string::String,
    /// Network ID to run the endpoint in
    #[prost(string, tag="2")]
    pub network_id: ::prost::alloc::string::String,
    /// Username for accessing the container endpoint.
    #[prost(string, tag="3")]
    pub username: ::prost::alloc::string::String,
    /// Password for accessing the container endpoint.
    #[prost(string, tag="4")]
    pub password: ::prost::alloc::string::String,
    /// Container port to be exposed.
    #[prost(uint32, tag="5")]
    pub port: u32,
    /// Container spec
    #[prost(message, optional, tag="101")]
    pub container: ::core::option::Option<EndpointContainerSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndpointContainerSpec {
    /// Image name
    #[prost(string, tag="1")]
    pub image: ::prost::alloc::string::String,
    /// Replica count
    #[prost(int64, tag="2")]
    pub replica_count: i64,
    /// Container resource template
    #[prost(message, optional, tag="3")]
    pub template: ::core::option::Option<EndpointTemplateSpec>,
    /// Endpoint command
    #[prost(string, tag="101")]
    pub command: ::prost::alloc::string::String,
    /// Command args
    #[prost(string, repeated, tag="102")]
    pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Environment variables
    #[prost(map="string, string", tag="103")]
    pub envs: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    /// Environment variables with sensitive data
    #[prost(map="string, string", tag="104")]
    pub sensitive_envs: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    /// Liveness probe spec
    #[prost(message, optional, tag="201")]
    pub liveness: ::core::option::Option<ProbeSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProbeSpec {
    /// Probe path
    #[prost(string, tag="1")]
    pub path: ::prost::alloc::string::String,
    /// Initial delay before starting probing in seconds
    #[prost(int64, tag="5")]
    pub delay_seconds: i64,
    /// Probing period in seconds
    #[prost(int64, tag="6")]
    pub period_seconds: i64,
    /// Failure threshold for the probe after which the container will be restarted
    #[prost(int64, tag="7")]
    pub failure_threshold: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndpointTemplateSpec {
    #[prost(message, optional, tag="1")]
    pub resources: ::core::option::Option<super::super::v1alpha1::resource::ResourcesSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndpointStatus {
    /// Current phase (or stage) of the workload.
    #[prost(enumeration="super::super::v1alpha1::cluster_status::Phase", tag="1")]
    pub phase: i32,
    /// State reflects substatus of the phase
    #[prost(enumeration="super::super::v1alpha1::cluster_status::State", tag="2")]
    pub state: i32,
    /// Public endpoint for accessing the workload.
    #[prost(string, tag="3")]
    pub public_endpoint: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateEndpointRequest {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<EndpointSpec>,
    /// If set to true, only API validation will be performed, without creating the endpoint.
    /// Returned operation will be in "done" state. ID of resource will be empty.
    #[prost(bool, tag="3")]
    pub dry_run: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListEndpointsResponse {
    /// List of Endpoints.
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<Endpoint>,
    /// Token for pagination, indicating the next set of results can be retrieved using this token.
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Job {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<JobSpec>,
    #[prost(message, optional, tag="3")]
    pub status: ::core::option::Option<JobStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobSpec {
    /// Description of the job.
    #[prost(string, tag="1")]
    pub description: ::prost::alloc::string::String,
    /// Network ID to run the job in
    #[prost(string, tag="2")]
    pub network_id: ::prost::alloc::string::String,
    /// Container spec
    #[prost(message, optional, tag="101")]
    pub container: ::core::option::Option<JobContainerSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobContainerSpec {
    /// Image name
    #[prost(string, tag="1")]
    pub image: ::prost::alloc::string::String,
    /// Replica count
    #[prost(int64, tag="2")]
    pub replica_count: i64,
    /// Container resource template
    #[prost(message, optional, tag="3")]
    pub template: ::core::option::Option<JobTemplateSpec>,
    /// Job command
    #[prost(string, tag="101")]
    pub command: ::prost::alloc::string::String,
    /// Command args
    #[prost(string, repeated, tag="102")]
    pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Environment variables
    #[prost(map="string, string", tag="103")]
    pub envs: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    /// Environment variables with sensitive data
    #[prost(map="string, string", tag="104")]
    pub sensitive_envs: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    /// Job timeout in seconds (0 - no timeout)
    #[prost(int64, tag="201")]
    pub timeout_seconds: i64,
    /// Max retries (0 - no retries)
    #[prost(int64, tag="202")]
    pub max_retries: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobTemplateSpec {
    #[prost(message, optional, tag="1")]
    pub resources: ::core::option::Option<super::super::v1alpha1::resource::ResourcesSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JobStatus {
    /// Current phase (or stage) of the workload.
    #[prost(enumeration="super::super::v1alpha1::cluster_status::Phase", tag="1")]
    pub phase: i32,
    /// State reflects substatus of the phase
    #[prost(enumeration="super::super::v1alpha1::cluster_status::State", tag="2")]
    pub state: i32,
    /// Job result
    #[prost(enumeration="JobResult", tag="3")]
    pub result: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JobResult {
    /// Job is not finished yet.
    Unspecified = 0,
    /// Job finished successfully.
    Success = 1,
    /// Job failed.
    Failure = 2,
    /// Job was cancelled.
    Cancelled = 3,
}
impl JobResult {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            JobResult::Unspecified => "JOB_RESULT_UNSPECIFIED",
            JobResult::Success => "JOB_RESULT_SUCCESS",
            JobResult::Failure => "JOB_RESULT_FAILURE",
            JobResult::Cancelled => "JOB_RESULT_CANCELLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JOB_RESULT_UNSPECIFIED" => Some(Self::Unspecified),
            "JOB_RESULT_SUCCESS" => Some(Self::Success),
            "JOB_RESULT_FAILURE" => Some(Self::Failure),
            "JOB_RESULT_CANCELLED" => Some(Self::Cancelled),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateJobRequest {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<JobSpec>,
    /// If set to true, only API validation will be performed, without creating the job.
    /// Returned operation will be in "done" state. ID of resource will be empty.
    #[prost(bool, tag="3")]
    pub dry_run: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelJobRequest {
    /// ID of the job to cancel.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListJobsResponse {
    /// List of jobs.
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<Job>,
    /// Token for pagination, indicating the next set of results can be retrieved using this token.
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
include!("nebius.msp.serverless.v1alpha1.serde.rs");
include!("nebius.msp.serverless.v1alpha1.tonic.rs");
// @@protoc_insertion_point(module)