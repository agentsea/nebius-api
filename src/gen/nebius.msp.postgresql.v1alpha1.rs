// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Backup {
    /// Required. ID of the backup.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// ID of the PostgreSQL cluster that the backup was created for.
    #[prost(string, tag="2")]
    pub source_cluster_id: ::prost::alloc::string::String,
    /// Creation start timestamp.
    #[prost(message, optional, tag="3")]
    pub creation_start: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Creation finish timestamp.
    #[prost(message, optional, tag="4")]
    pub creation_finish: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Name of the PostgreSQL cluster that the backup was created for.
    #[prost(string, tag="5")]
    pub source_cluster_name: ::prost::alloc::string::String,
    /// Is PostgreSQL cluster that the backup was created for visible.
    #[prost(bool, tag="6")]
    pub source_cluster_visible: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBackupRequest {
    /// ID of the PostgreSQL cluster that holds backup.
    #[prost(string, tag="1")]
    pub cluster_id: ::prost::alloc::string::String,
    /// ID of the designated backup.
    #[prost(string, tag="2")]
    pub backup_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBackupsRequest {
    /// Identifier of IAM container to list backups from.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBackupsByClusterRequest {
    /// ID of the PostgreSQL cluster to list backups from.
    #[prost(string, tag="1")]
    pub cluster_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBackupsResponse {
    /// List of backups.
    #[prost(message, repeated, tag="1")]
    pub backups: ::prost::alloc::vec::Vec<Backup>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TemplateSpec {
    /// reduced msp.v1alpha1.resource.TemplateSpec
    #[prost(message, optional, tag="1")]
    pub resources: ::core::option::Option<super::super::v1alpha1::resource::ResourcesSpec>,
    #[prost(message, optional, tag="2")]
    pub hosts: ::core::option::Option<super::super::v1alpha1::resource::HostSpec>,
    #[prost(message, optional, tag="3")]
    pub disk: ::core::option::Option<super::super::v1alpha1::resource::DiskSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cluster {
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::super::common::v1::ResourceMetadata>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<ClusterSpec>,
    #[prost(message, optional, tag="3")]
    pub status: ::core::option::Option<ClusterStatus>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ConnectionPoolerConfig {
    /// Mode that the connection pooler is working in.
    #[prost(enumeration="connection_pooler_config::PoolingMode", tag="1")]
    pub pooling_mode: i32,
    /// Maximum number of connections in the pool for a single database.
    #[prost(int64, optional, tag="2")]
    pub max_pool_size: ::core::option::Option<i64>,
}
/// Nested message and enum types in `ConnectionPoolerConfig`.
pub mod connection_pooler_config {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum PoolingMode {
        Unspecified = 0,
        /// Session pooling mode.
        Session = 1,
        /// Transaction pooling mode.
        Transaction = 2,
    }
    impl PoolingMode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                PoolingMode::Unspecified => "POOLING_MODE_UNSPECIFIED",
                PoolingMode::Session => "SESSION",
                PoolingMode::Transaction => "TRANSACTION",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "POOLING_MODE_UNSPECIFIED" => Some(Self::Unspecified),
                "SESSION" => Some(Self::Session),
                "TRANSACTION" => Some(Self::Transaction),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterSpec {
    /// Description of the PostgreSQL cluster.
    #[prost(string, tag="1")]
    pub description: ::prost::alloc::string::String,
    /// Network ID in which the cluster is created.
    #[prost(string, tag="6")]
    pub network_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub config: ::core::option::Option<ConfigSpec>,
    #[prost(message, optional, tag="4")]
    pub bootstrap: ::core::option::Option<BootstrapSpec>,
    #[prost(message, optional, tag="5")]
    pub backup: ::core::option::Option<BackupSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterStatus {
    /// Current phase of the cluster.
    #[prost(enumeration="super::super::v1alpha1::cluster_status::Phase", tag="1")]
    pub phase: i32,
    /// State reflects substatus of the phase to define whether it's healthy or not.
    #[prost(enumeration="super::super::v1alpha1::cluster_status::State", tag="2")]
    pub state: i32,
    /// Cluster resource preset details
    #[prost(message, optional, tag="4")]
    pub preset_details: ::core::option::Option<super::super::v1alpha1::resource::PresetDetails>,
    /// Connection endpoints of the PostgreSQL cluster.
    #[prost(message, optional, tag="5")]
    pub connection_endpoints: ::core::option::Option<Endpoints>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Endpoints {
    /// Read write endpoint of the PostgreSQL cluster accessible from the private VPC.
    #[prost(string, tag="1")]
    pub private_read_write: ::prost::alloc::string::String,
    /// Read only endpoint of the PostgreSQL cluster accessible from the private VPC.
    #[prost(string, tag="2")]
    pub private_read_only: ::prost::alloc::string::String,
    /// Read write endpoint of the PostgreSQL cluster accessible from the internet.
    #[prost(string, tag="3")]
    pub public_read_write: ::prost::alloc::string::String,
    /// Read only endpoint of the PostgreSQL cluster accessible from the internet.
    #[prost(string, tag="4")]
    pub public_read_only: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigSpec {
    /// Version of PostgreSQL used in the cluster.
    /// Possible values: `16`
    #[prost(string, tag="1")]
    pub version: ::prost::alloc::string::String,
    /// Configuration of the connection pooler.
    #[prost(message, optional, tag="2")]
    pub pooler_config: ::core::option::Option<ConnectionPoolerConfig>,
    /// Either make cluster public accessible or accessible only via private VPC.
    #[prost(bool, tag="5")]
    pub public_access: bool,
    /// Resources allocated to PostgreSQL hosts.
    #[prost(message, optional, tag="7")]
    pub template: ::core::option::Option<TemplateSpec>,
    /// Config of the PostgreSQL cluster.
    #[prost(oneof="config_spec::Config", tags="4")]
    pub config: ::core::option::Option<config_spec::Config>,
}
/// Nested message and enum types in `ConfigSpec`.
pub mod config_spec {
    /// Config of the PostgreSQL cluster.
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Config {
        /// Configuration parameters for postgres
        #[prost(message, tag="4")]
        PostgresqlConfig16(super::config::PostgresqlConfig16),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BootstrapSpec {
    /// Name of the bootstrap PostgreSQL user.
    #[prost(string, tag="1")]
    pub user_name: ::prost::alloc::string::String,
    /// Password of the bootstrap PostgreSQL user.
    #[prost(string, tag="2")]
    pub user_password: ::prost::alloc::string::String,
    /// Name of the PostgreSQL database. 1-63 characters long.
    #[prost(string, tag="3")]
    pub db_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BackupSpec {
    /// Backup window start in "HH:MM:SS" format (UTC Time)
    #[prost(string, tag="1")]
    pub backup_window_start: ::prost::alloc::string::String,
    /// Retention policy to be used for backups and WALs (i.e. '7d')
    #[prost(string, tag="2")]
    pub retention_policy: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClusterRequest {
    /// ID of the PostgreSQL Cluster resource to return.
    /// To get the cluster ID use a \[ClusterService.List\] request.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClusterForBackupRequest {
    /// ID of the PostgreSQL cluster that holds backup.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// ID of the backup for which source cluster is requested.
    #[prost(string, tag="2")]
    pub backup_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListClustersRequest {
    /// Identifier of IAM container to list clusters from.
    #[prost(string, tag="1")]
    pub parent_id: ::prost::alloc::string::String,
    /// Specifies the maximum number of items to return in the response.
    #[prost(int64, tag="2")]
    pub page_size: i64,
    /// Token for pagination, allowing the retrieval of the next set of results.
    #[prost(string, tag="3")]
    pub page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListClustersResponse {
    /// List of PostgreSQL Cluster resources.
    #[prost(message, repeated, tag="1")]
    pub clusters: ::prost::alloc::vec::Vec<Cluster>,
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than \[ListClustersRequest.page_size\], use the \[next_page_token\] as the value
    /// for the \[ListClustersRequest.page_token\] parameter in the next list request. Each subsequent
    /// list request will have its own \[next_page_token\] to continue paging through the results.
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateClusterRequest {
    /// Metadata associated with the new cluster.
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::super::common::v1::ResourceMetadata>,
    /// Specification for the new cluster.
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<ClusterSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestoreClusterRequest {
    /// Metadata associated with the new cluster.
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::super::common::v1::ResourceMetadata>,
    /// Specification for the new cluster.
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<ClusterSpec>,
    /// ID of the backup to restore from.
    #[prost(string, tag="3")]
    pub backup_id: ::prost::alloc::string::String,
    /// ID of the PostgreSQL cluster to restore from.
    #[prost(string, tag="4")]
    pub source_cluster_id: ::prost::alloc::string::String,
    /// Timestamp for point in time recovery.
    #[prost(message, optional, tag="5")]
    pub recovery_time: ::core::option::Option<::pbjson_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteClusterRequest {
    /// ID of the PostgreSQL cluster to delete.
    /// To get the PostgreSQL cluster ID, use a \[ClusterService.List\] request.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateClusterRequest {
    /// Metadata associated with the cluster. Must include id of the cluster we are going to update.
    #[prost(message, optional, tag="1")]
    pub metadata: ::core::option::Option<super::super::super::common::v1::ResourceMetadata>,
    /// Updated specification for the cluster.
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<ClusterSpec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopClusterRequest {
    /// ID of the PostgreSQL Cluster resource to pause.
    /// To get the cluster ID use a \[ClusterService.List\] request.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartClusterRequest {
    /// ID of the PostgreSQL Cluster resource to resume.
    /// To get the cluster ID use a \[ClusterService.List\] request.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
include!("nebius.msp.postgresql.v1alpha1.serde.rs");
include!("nebius.msp.postgresql.v1alpha1.tonic.rs");
// @@protoc_insertion_point(module)