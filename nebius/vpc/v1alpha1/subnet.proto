syntax = "proto3";

package nebius.vpc.v1alpha1;

import "buf/validate/validate.proto";
import "nebius/common/v1/metadata.proto";
import "nebius/vpc/v1alpha1/pool.proto";

option go_package = "github.com/nebius/gosdk/proto/nebius/vpc/v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "SubnetProto";
option java_package = "ai.nebius.pub.vpc.v1alpha1";

// Defines a Subnet, a segment of a network used for more granular control and management.
// Subnet uses pools to organize address space.
message Subnet {
  // Metadata for the subnet resource.
  // `metadata.parent_id` represents IAM container
  common.v1.ResourceMetadata metadata = 1;

  // Specification of the subnet.
  SubnetSpec spec = 2;

  // Status of the subnet.
  SubnetStatus status = 3;
}

message SubnetSpec {
  // Network ID.
  string network_id = 1 [(buf.validate.field).required = true];

  // Pool for addresses
  repeated SubnetPool pools = 2 [(buf.validate.field).required = true];

  // Enable egress NAT gateway
  bool enable_egress_nat = 3;
}

message SubnetPool {
  oneof pool {
    option (buf.validate.oneof).required = true;

    SubnetPoolSpec spec = 1;

    string pool_id = 2;
  }
}

message SubnetPoolSpec {
  IpVersion version = 1 [(buf.validate.field).required = true];

  repeated SubnetCidr cidrs = 2;
}

message SubnetCidr {
  // CIDR block.
  // May be a prefix length (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
  string cidr = 1 [
    (buf.validate.field) = {
      cel: [
        {
          id: "string.valid_cidr",
          message: "value must be a valid IP address, CIDR or mask",
          expression: "this == '' || this.matches('^/([0-9]|[1-9][0-9]|1[0-2][0-8])$') || this.isIp() || this.isIpPrefix(true)"
        },
        {
          id: "string.ip_empty",
          message: "value is empty, which is not a valid IP address",
          expression: "this != ''"
        }
      ],
      required: true
    }
  ];

  // State of the Cidr.
  PoolCidrState state = 2 [(buf.validate.field).required = true];

  // Maximum mask length for allocation from this cidr
  int64 allowed_mask = 3 [(buf.validate.field) = { int64: { lte: 128, gte: 0 }, required: true }];
}

message SubnetStatus {
  // Enumeration of possible states of the subnet.
  enum State {
    STATE_UNSPECIFIED = 0; // Default state, unspecified.

    CREATING = 1; // Subnet is being created.

    READY = 2; // Subnet is ready for use.

    DELETING = 3; // Subnet is being deleted.
  }

  // Current state of the subnet.
  State state = 1;

  // CIDR blocks.
  repeated string ipv4_cidrs = 2;
}
